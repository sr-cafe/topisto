{"version":3,"sources":["../../src/core/patterns.es6"],"names":[],"mappings":";;;;;;;AAAA;;;;;;AAEO,IAAM,8CAAmB,YAAnB;AACN,IAAM,4CAAkB,WAAlB;;AAEN,IAAM,sDAAuB,MAAvB;AACN,IAAM,sDAAuB,MAAvB;AACN,IAAM,wDAAwB,OAAxB;;AAGN,IAAM,kCAAa,OAAb;AACN,IAAM,8BAAW,UAAX;;;AAGN,IAAI,8CAAmB,CAC7B;AACC,OAAM,SAAN;AACA,aAAY,EAAZ;AACA,WAAU,CACT;AACC,QAAM,gBAAN;AACA,WAAS;AACR,UAAO,IAAP;GADD;EAHQ,CAAV;CAJ4B,EAa7B;AACC,OAAM,YAAN;AACA,aAAY,CACX,IADW,EAEX,KAFW,CAAZ;AAIA,WAAU,CACT;AACC,QAAM,gBAAN;AACA,WAAS;AACR,UAAO,OAAP;GADD;EAHQ,EAOT;AACC,QAAM,eAAN;AACA,WAAS;AACR,UAAO,OAAP;AACA,QAAK,OAAL;GAFD;EATQ,CAAV;AAeA,WAAU,CACT,MADS,EAET,KAFS,CAAV;CAlC4B,EAuC7B;AACC,OAAM,KAAN;AACA,aAAY,CACX,KADW,EAEX,MAFW,CAAZ;AAIA,WAAU,CACT;AACC,QAAM,gBAAN;AACA,WAAS;AACR,UAAO,OAAP;GADD;EAHQ,EAOT;AACC,QAAM,eAAN;AACA,WAAS;AACR,UAAO,OAAP;AACA,QAAK,OAAL;GAFD;EATQ,CAAV;AAeA,WAAU,CACT,MADS,EAET,KAFS,CAAV;CA5D4B,CAAnB;;AAmEX,IAAI,qBAAqB,gBAAE,KAAF,CAAQ,UAAS,IAAT,EAAe,cAAf,EAA8B;AAC9D,QAAO,eAAe,IAAf,KAAwB,IAAxB,CADuD;CAA9B,CAA7B;;AAIJ,IAAI,0BAA0B,gBAAE,KAAF,CAAQ,UAAS,SAAT,EAAoB,cAApB,EAAmC;AACxE,QAAO,eAAe,UAAf,CAA0B,OAA1B,CAAkC,SAAlC,IAA+C,CAAC,CAAD,CADkB;CAAnC,CAAlC;;AAIG,IAAI,0EAAiC,SAAjC,8BAAiC,CAAS,UAAT,EAAoB;AAC/D,KAAI,YAAY,WAAW,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,GAA/B,GACb,WAAW,SAAX,CAAqB,CAArB,CADa,GAEb,UAFa,CAD+C;;AAK/D,KAAI,uBAAuB,iBAAiB,MAAjB,CAAwB,wBAAwB,SAAxB,CAAxB,CAAvB,CAL2D;;AAO/D,QAAO,qBAAqB,MAArB,GACJ,qBAAqB,CAArB,CADI,GAEJ,gBAAgB,SAAhB,CAFI,CAPwD;CAApB;;AAYrC,IAAI,gEAA4B,SAA5B,yBAA4B,CAAS,IAAT,EAAc;AACpD,KAAI,kBAAkB,iBAAiB,MAAjB,CAAwB,mBAAmB,IAAnB,CAAxB,CAAlB,CADgD;;AAGpD,QAAO,gBAAgB,MAAhB,GACJ,gBAAgB,CAAhB,CADI,GAEJ,gBAAgB,SAAhB,EAA2B,CAA3B,CAFI,CAH6C;CAAd;;AAQhC,IAAI,4DAA0B,SAA1B,uBAA0B,CAAS,SAAT,EAAmB;AACvD,QAAO,+BAA+B,SAA/B,EAA0C,IAA1C,CADgD;CAAnB;;AAI9B,IAAM,kDAAqB,CACjC;AACC,OAAM,oBAAN;AACA,UAAS,UAAT;CAHgC,EAKjC;AACC,OAAM,oBAAN;AACA,UAAS,UAAT;CAPgC,EASjC;AACC,OAAM,qBAAN;AACA,UAAS,WAAT;CAXgC,CAArB","file":"patterns.js","sourcesContent":["import R from 'ramda';\n\nexport const LINE_TYPE_SINGLE = 'singleLine';\nexport const LINE_TYPE_MULTI = 'multiLine';\n\nexport const ANNOTATION_TYPE_TODO = 'TODO';\nexport const ANNOTATION_TYPE_NOTE = 'NOTE';\nexport const ANNOTATION_TYPE_FIXME = 'FIXME';\n\n\nexport const EMPTY_LINE = /^\\s*$/;\nexport const NEW_LINE = /[\\r\\n]+/g;\n\n// TODO: Allow new patterns to be injected\nexport let COMMENT_PATTERNS = [\n\t{\n\t\ttype: 'default',\n\t\textensions: [],\n\t\tmatchers: [\n\t\t\t{\n\t\t\t\ttype: LINE_TYPE_SINGLE,\n\t\t\t\tpattern: {\n\t\t\t\t\tstart: /^#/\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\ttype: 'javascript',\n\t\textensions: [\n\t\t\t'js',\n\t\t\t'es6'\n\t\t],\n\t\tmatchers: [\n\t\t\t{\n\t\t\t\ttype: LINE_TYPE_SINGLE,\n\t\t\t\tpattern: {\n\t\t\t\t\tstart: /^\\/\\//\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: LINE_TYPE_MULTI,\n\t\t\t\tpattern: {\n\t\t\t\t\tstart: /^\\/\\*/,\n\t\t\t\t\tend: /\\*\\/$/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tcleaners: [\n\t\t\t/\\*+/g,\n\t\t\t/-+/g\n\t\t]\n\t},\n\t{\n\t\ttype: 'css',\n\t\textensions: [\n\t\t\t'css',\n\t\t\t'scss'\n\t\t],\n\t\tmatchers: [\n\t\t\t{\n\t\t\t\ttype: LINE_TYPE_SINGLE,\n\t\t\t\tpattern: {\n\t\t\t\t\tstart: /^\\/\\//\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: LINE_TYPE_MULTI,\n\t\t\t\tpattern: {\n\t\t\t\t\tstart: /^\\/\\*/,\n\t\t\t\t\tend: /\\*\\/$/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tcleaners: [\n\t\t\t/\\*+/g,\n\t\t\t/-+/g\n\t\t]\n\t}\n];\n\nlet typePatternsFilter = R.curry(function(type, commentPattern){\n\treturn commentPattern.type === type;\n});\n\nlet extensionPatternsFilter = R.curry(function(extension, commentPattern){\n\treturn commentPattern.extensions.indexOf(extension) > -1;\n});\n\nexport let getCommentPatternsForExtension = function(_extension){\n\tlet extension = _extension.substring(0, 1) === '.'\n\t\t? _extension.substring(1)\n\t\t: _extension;\n\n\tlet patternsForExtension = COMMENT_PATTERNS.filter(extensionPatternsFilter(extension));\n\n\treturn patternsForExtension.length\n\t\t? patternsForExtension[0]\n\t\t: patternsForType('default');\n}\n\nexport let getCommentPatternsForType = function(type){\n\tlet patternsForType = COMMENT_PATTERNS.filter(typePatternsFilter(type));\n\n\treturn patternsForType.length\n\t\t? patternsForType[0]\n\t\t: patternsForType('default')[0];\n}\n\nexport let getFileTypeForExtension = function(extension){\n\treturn getCommentPatternsForExtension(extension).type;\n}\n\nexport const ANNOTATION_PATERNS = [\n\t{\n\t\ttype: ANNOTATION_TYPE_TODO,\n\t\tpattern: /^TODO\\W*/\n\t},\n\t{\n\t\ttype: ANNOTATION_TYPE_NOTE,\n\t\tpattern: /^NOTE\\W*/\n\t},\n\t{\n\t\ttype: ANNOTATION_TYPE_FIXME,\n\t\tpattern: /^FIXME\\W*/\n\t}\n];\n"]}